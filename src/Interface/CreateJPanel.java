/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.ActiveServerPool;
import Business.UserRequestQueue;
import Business.Dispatcher;
import Business.RequestGenerator;
import Business.ServiceQueue;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
/**
 *
 * @author aasth
 */
public class CreateJPanel extends javax.swing.JPanel {

  
    private RequestGenerator requestGenerator;
    //private ServiceQueue serviceQueue;
    private Dispatcher reqServiceDispatcher;
    private ActiveServerPool activeServiceQueue;
    private UserRequestQueue userRequestQueue;
    int rate;
    int proccessTime;
    long startTime;
    
    
    
    public CreateJPanel( RequestGenerator requestGenerator, Dispatcher reqServiceDispatcher) {
        initComponents();
      this.requestGenerator = requestGenerator;
      //this.serviceQueue = serviceQueue;
      this.reqServiceDispatcher = reqServiceDispatcher;
      this.activeServiceQueue = reqServiceDispatcher.getActiveServiceQueue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        processTime = new javax.swing.JTextField();
        reqRate = new javax.swing.JTextField();
        submitBtn = new javax.swing.JButton();
        changeButton = new javax.swing.JButton();
        sizeOfRequestQueue = new javax.swing.JTextField();
        numberOfServers = new javax.swing.JTextField();
        responseTime = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        errorUserRate = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("User Input");

        jLabel2.setText("User Request Rate (r)");

        jLabel3.setText("Processing Time (p)");

        processTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processTimeActionPerformed(evt);
            }
        });

        reqRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqRateActionPerformed(evt);
            }
        });

        submitBtn.setText("Simulate");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        changeButton.setText("Change Rate");
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });

        sizeOfRequestQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeOfRequestQueueActionPerformed(evt);
            }
        });

        numberOfServers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfServersActionPerformed(evt);
            }
        });

        responseTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseTimeActionPerformed(evt);
            }
        });

        jLabel4.setText("Size Of Request Queue");

        jLabel5.setText("Total number of servers used");

        jLabel6.setText("Response Time");

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reqRate, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(processTime, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(submitBtn)
                                        .addGap(30, 30, 30)
                                        .addComponent(changeButton))))
                            .addComponent(errorUserRate, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel1)))
                .addContainerGap(379, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sizeOfRequestQueue))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refresh)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(numberOfServers))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(responseTime, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(220, 220, 220))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorUserRate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(reqRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(processTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitBtn)
                    .addComponent(changeButton))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfServers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeOfRequestQueue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(responseTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(refresh)
                .addContainerGap(262, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reqRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reqRateActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        
        if(reqRate.getText().matches("[0-9]*") && processTime.getText().matches("[0-9]*") ){
            System.out.println("number input");
     
        errorUserRate.setText("");
        startTime=System.currentTimeMillis();
        requestGenerator.setReqRate(reqServiceDispatcher, Integer.parseInt(reqRate.getText()));
        proccessTime= Integer.parseInt(processTime.getText());
        rate=requestGenerator.getReqRate();
        Runnable runnable = new Runnable()
       // Thread t1 = new Thread(runnable
        {
            //@Override
            public void run()
            {
               
                while(true){
                    synchronized(this){
                          //timer starts
                          requestGenerator.setReqRate(reqServiceDispatcher,rate);
                for(int i = 0; i< requestGenerator.getReqRate(); i++){
                            requestGenerator.getReqQueue().enqueue((int) (Math.random() * 50 + 1));
                            requestGenerator.getReqQueue().display();
                           // System.out.println("Sizing:"+requestGenerator.getReqQueue().getSize());
                            
                        }
             
                notify();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                
               
                    }
                }
              
            }
        };
        
        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
        service.scheduleAtFixedRate(runnable, 0, requestGenerator.getReqRate(), TimeUnit.SECONDS);
 
        
        
       Runnable runnable2 = new Runnable() {
        
            public void run()
            {
                
                
                while(true){
                    synchronized(this){
                        //dispatcher starts
                while (!requestGenerator.getReqQueue().isEmpty()) {
                    
                    int request;
               
                    
             // Wait timer set to display number of active requests in request arrival queue
                   try {
                    Thread.sleep(10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                    request = requestGenerator.getReqQueue().dequeue().data;
                  
              // Remove the empty service queue
              
                     for(int x=0;x<activeServiceQueue.getServiceQueueList().size();x++){
                    if(activeServiceQueue.getServiceQueueList().get(x).isEmpty()){
                        System.out.println("ready to be removed from activeQueuelist:"+x);
                        activeServiceQueue.getServiceQueueList().remove(activeServiceQueue.getServiceQueueList().get(x));
                    }
                }
                   
                    int size=activeServiceQueue.getServiceQueueList().size();
                    if(size==0||activeServiceQueue.getServiceQueueList().get(size-1).isFull())
                    {
                        ServiceQueue serviceQueue  = new ServiceQueue();
                        serviceQueue.sqTimerDeque();
                        activeServiceQueue.getServiceQueueList().add(serviceQueue);
                        System.out.println("Service Queue Name : "+activeServiceQueue.getServiceQueueList());
                    }
                    //inserting into last queue
                    activeServiceQueue.getServiceQueueList().get(activeServiceQueue.getServiceQueueList().size()-1).enqueue(request);
                    
                     
                }
                System.out.println("Total Queue created: " + activeServiceQueue.getServiceQueueList().size() );
                System.out.println("Service Queue Name : "+activeServiceQueue.getServiceQueueList());
                
               
                
                notify();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //dispatcher ends
                    }
                }
                
                
            }
        };
      
        
       ScheduledExecutorService service2 = Executors.newSingleThreadScheduledExecutor();
        service2.scheduleAtFixedRate(runnable2, 0,proccessTime , TimeUnit.SECONDS);
        
           }
        else{
            errorUserRate.setForeground(Color.red);
          //  errorUserRate.setFont(italic);
            errorUserRate.setText(" Please Enter a numeric value");
         System.out.println("Enter a numeric value");   
        }
        
    }//GEN-LAST:event_submitBtnActionPerformed

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed
    
        rate=Integer.parseInt(reqRate.getText());
        System.out.println("Process time:"+proccessTime);
        System.out.println("rate changed");
    }//GEN-LAST:event_changeButtonActionPerformed

    private void processTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_processTimeActionPerformed

    private void numberOfServersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfServersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberOfServersActionPerformed

    private void sizeOfRequestQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeOfRequestQueueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeOfRequestQueueActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
          int sizeofRe=requestGenerator.getReqQueue().getSize();
        if(sizeofRe==0 || requestGenerator.getReqQueue()!=null){
        sizeOfRequestQueue.setText(String.valueOf(sizeofRe));
        }
        else{
           sizeOfRequestQueue.setText("0"); 
        }
            long endTime = System.currentTimeMillis();
            long totalTime = (endTime-startTime)/1000;
         numberOfServers.setText(String.valueOf(activeServiceQueue.getServiceQueueList().size()));
         responseTime.setText(String.valueOf((float)totalTime/rate));
         
         
    }//GEN-LAST:event_refreshActionPerformed

    private void responseTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_responseTimeActionPerformed

    // Prompt user that product is successfully created
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeButton;
    private javax.swing.JLabel errorUserRate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField numberOfServers;
    private javax.swing.JTextField processTime;
    private javax.swing.JButton refresh;
    private javax.swing.JTextField reqRate;
    private javax.swing.JTextField responseTime;
    private javax.swing.JTextField sizeOfRequestQueue;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables

  
}
